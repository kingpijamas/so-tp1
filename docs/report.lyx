#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
Trabajo Práctico 1
\begin_inset Newline newline
\end_inset

Sistemas Operativos
\series default

\begin_inset Newline newline
\end_inset


\size normal
Especificaciones del sistema cliente-servidor
\end_layout

\begin_layout Author

\series bold
Alumnos:
\series default
\noun on

\begin_inset Newline newline
\end_inset


\size small
\noun default
di Tada, Teresa
\begin_inset space \enskip{}
\end_inset

(Legajo: 52354)
\begin_inset Newline newline
\end_inset

Rey, Juan Pablo
\begin_inset space \enskip{}
\end_inset

(Legajo: 50265)
\end_layout

\begin_layout Date

\series bold
Fecha de entrega:
\series default
\noun on

\begin_inset Newline newline
\end_inset


\size small
\noun default
31 de Marzo de 2014
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
Introducción
\end_layout

\begin_layout Standard
El trabajo práctico consta de la realización de múltiples implementaciones
 de un sistema cliente-servidor a definir utilizando distintos mecanismos
 IPC.
 El sistema cliente-servidor elegido es un sistema de manejo de stock rudimentar
io, utilizando como ejemplo en el presente informe el stock de una librería.
\end_layout

\begin_layout Subsubsection*
Implementaciones a realizarse:
\end_layout

\begin_layout Enumerate
Clientes con acceso directo a la base de datos, con file control como mecanismo
 de exclusión.
\end_layout

\begin_layout Enumerate
Base de datos gestionada por un servidor, quien proporciona a los clientes
 los servicios necesarios:
\end_layout

\begin_deeper
\begin_layout Enumerate
Clientes locales, los cuales correrán en la misma máquina que el servidor.
\end_layout

\begin_layout Enumerate
Clientes externos, los cuales correrán máquinas diferentes a la del servidor.
\end_layout

\end_deeper
\begin_layout Section*
Prestaciones del sistema
\end_layout

\begin_layout Standard
El sistema permitirá a los usuarios:
\end_layout

\begin_layout Itemize

\shape italic
Ver
\shape default
 todos los datos de productos existentes en el stock
\end_layout

\begin_layout Itemize

\shape italic
Agregar
\shape default
 nuevos productos al stock
\end_layout

\begin_layout Itemize

\shape italic
Remover
\shape default
 productos del stock, haciéndolos inválidos desde ese momento
\end_layout

\begin_layout Itemize

\shape italic
Depositar
\shape default
 cantidades de productos existentes al stock
\end_layout

\begin_layout Itemize

\shape italic
Sustraer
\shape default
 cantidades de productos existentes del stock
\end_layout

\begin_layout Standard
A su vez, se encargará de mantener consistencia en los datos del stock a
 todo momento, manteniendo una exclusión mutua de clientes para evitar problemas
 de concurrencia.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Section*
Especificación del funcionamiento del servidor y de los clientes
\end_layout

\begin_layout Subsection*
Cliente
\end_layout

\begin_layout Standard
El cliente constará de funciones con las cuales manejará el stock: mostrar,
 agregar, remover, depositar y sustraer un producto.
 Todas recibirán el nombre del producto como parámetro, puesto que se lo
 optó por sobre un id por cuestiones de simplicidad.
 Los prototipos de dichas funciones pueden apreciarse debajo, en la estructura
 de 
\shape italic
client.h
\shape default
:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

void show_product(char * prodname);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

void add_product(char * prodname, int quantity);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

void remove_product(char * prodname);
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

void deposit_product(char * prodname, int quantity);
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

void take_product(char * prodname, int quantity); 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de 
\shape italic
client.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Servidor
\end_layout

\begin_layout Standard
El servidor, por otra parte, ofrecerá los servicios respectivos para obtener
 los datos de un producto, para insertar o modificar un producto y para
 removerlo -como se aclaró previamente, el servidor, en las implementaciones
 en las que esté presente, será el único en contactarse con la base de datos.
 
\end_layout

\begin_layout Standard
Todas las funciones del servidor recibirán el id del cliente que realizó
 el llamado, un mensaje genérico y su dimensión, y en todos los casos retornarán
 códigos de tipo 
\shape italic
srv_ret_code
\shape default
, los cuales indicarán si el procesamiento del request se hizo de manera
 adecuada o si hubo algún problema (por ejemplo, si el mensaje recibido
 fue inválido, o si el producto solicitado es inexistente).
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

srv_ret_code srv_write_product(int fromId, void * msg, int msglen);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

srv_ret_code srv_get_product(int fromId, void * msg, int msglen);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

srv_ret_code srv_remove_product(int fromId, void * msg, int msglen);
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de 
\shape italic
server.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Comunicación entre cliente y servidor
\end_layout

\begin_layout Standard
La comunicación entre partes en los casos en los que el servidor esté presente
 se hará a través de las funciones 
\shape italic
ipc_send
\shape default
 e 
\shape italic
ipc_recv
\shape default
.
 Estas utilizan los identificadores de los procesos para conocer quién envió
 o va a recibir la señal (en el caso de 
\shape italic
ipc_recv
\shape default
, por no ser estrictamente necesario saber quién envió el pedido, se optó
 por que el usuario deba enviar el fromid en el cuerpo del mensaje de serle
 necesario).
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int ipc_init(int fromid);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int ipc_send(int fromid, int toid, void * buf, int len);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int ipc_recv(void * buf, int len); int ipc_close(int fromid);
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int ipc_close(int fromid);
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de 
\shape italic
communicator.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Base de datos
\end_layout

\begin_layout Standard
La base de datos serán archivos con el nombre del producto y la cantidad
 de stock.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

db_ret_code db_init();
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

db_ret_code db_save_product(Product product);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

db_ret_code db_get_product_by_name(char * name, Product * productp);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

db_ret_code db_update_product(Product product);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

db_ret_code db_delete_product(char * name);
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de 
\shape italic
productDB.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exclusión mutua
\end_layout

\begin_layout Standard
La exclusión mutua se garantiza a través del lockeo, como se requiere en
 la consigna (a través del uso de 
\shape italic
fcntl()
\shape default
 y advisory locking) que se realiza con un módulo de exclusión mutua.
 En las implementaciones con servidor, esta será garantizada por el servidor
 -quien llamará de todas formas a este módulo si le es necesario.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

StockT bdx_db_save_product(Product product);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int bdx_db_get_product_by_name(char * name, Product * productp);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int bxd_db_update_product(Product product);
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \qquad{}
\end_inset

int bdx_db_delete_product(char * name);
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de 
\shape italic
bdx.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Funcionamiento general de los sistemas
\end_layout

\begin_layout Subsection*
Caso sin servidor
\end_layout

\begin_layout Standard
Los clientes se comunican directamente con la base de datos generando esta
 la exclusión mutua con advisory lockers y la función file control.
\end_layout

\begin_layout Standard
Una secuencia de uso posible sería, por ejemplo:
\end_layout

\begin_layout Enumerate
Se crea una instancia del cliente.
 Al crearse, esta inicializa el depósito llamando a 
\shape italic
db_init() 
\shape default
-de haber ya sido inicializada la base de datos no habrá problema.
\end_layout

\begin_layout Enumerate
Se decide sustraer un lápiz del depósito
\end_layout

\begin_layout Enumerate
Se llama a la función 
\shape italic
take_product()
\shape default
 con el nombre 
\begin_inset Quotes eld
\end_inset

lapiz
\begin_inset Quotes erd
\end_inset

 y la cantidad deseada.
\end_layout

\begin_layout Enumerate
Esta llama al módulo de exclusión mutua .
\end_layout

\begin_layout Enumerate
El módulo de exclusión mutua llama a db_get_product_by_name().
\end_layout

\begin_layout Enumerate
Se modifica la cantidad en el Product (se le resta uno).
\end_layout

\begin_layout Enumerate
Se llama a la función 
\shape italic
db_update_product
\shape default
 con el Product modificado como parámetro.
\end_layout

\begin_layout Subsection*
Con clientes y servidor, conectados mediante diferentes IPCs
\end_layout

\begin_layout Enumerate
Se crea una instancia del servidor que queda iniciada y en espera de una
 petición de algún cliente (el cual conocerá donde esta el servidor para
 poder contactarse con el).
\end_layout

\begin_layout Enumerate
Varios clientes envían diferentes peticiones (por ejemplo, 
\shape italic
take_product(...)
\shape default
) las cuales llamarán al módulo de comunicación para enviar sus respectivos
 mensajes al servidor.
 
\end_layout

\begin_layout Enumerate
Como la implementación base del cliente-servidor no será concurrente, el
 servidor, -quien estará conectado al módulo de comunicación mediante 
\shape italic
recv(...)-
\shape default
 recibirá uno de los mensajes y lo atenderá, mientras que fallarán todos
 los demás.
 Para atender el mensaje, el servidor hará las llamadas correspondientes
 a la base de datos.
\end_layout

\end_body
\end_document
